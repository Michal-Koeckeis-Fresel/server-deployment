# BunkerWeb syslog-ng configuration

# This configuration receives logs from BunkerWeb containers and organizes them

@version: 4.8
@include “scl.conf”

# Global options

options {
chain_hostnames(off);
flush_lines(0);
use_dns(no);
use_fqdn(no);
owner(“root”);
group(“adm”);
perm(0640);
stats_freq(0);
bad_hostname(”^gconfd$”);
keep_hostname(yes);
log_fifo_size(1000);
create_dirs(yes);
dir_perm(0755);
file_perm(0644);
};

# Source definitions - receive logs via UDP syslog

source s_network {
network(
transport(“udp”)
port(514)
ip(“0.0.0.0”)
);
};

# Local system logs

source s_src {
system();
internal();
};

# Filter definitions - separate BunkerWeb logs by service

filter f_bunkerweb {
program(“bunkerweb”);
};

filter f_bw_scheduler {
program(“bw-scheduler”);
};

filter f_bw_autoconf {
program(“bw-autoconf”);
};

filter f_bw_ui {
program(“bw-ui”);
};

filter f_bw_redis {
program(“bw-redis”);
};

filter f_access_logs {
message(“access_log”);
};

filter f_error_logs {
message(“error_log”);
};

filter f_security_logs {
message(“security”) or message(“blocked”) or message(“denied”) or message(“attack”);
};

# Parser for BunkerWeb log format

parser p_bunkerweb {
csv-parser(
columns(“timestamp”, “level”, “service”, “message”)
delimiters(” “)
quote-pairs(’””[]’)
);
};

# Destination definitions - organize logs by service and type

destination d_bunkerweb_access {
file(”/var/log/bunkerweb/access.log”
create_dirs(yes)
dir_perm(0755)
perm(0644)
template(”${ISODATE} ${HOST} ${PROGRAM}: ${MESSAGE}\n”)
);
};

destination d_bunkerweb_error {
file(”/var/log/bunkerweb/error.log”
create_dirs(yes)
dir_perm(0755)
perm(0644)
template(”${ISODATE} ${HOST} ${PROGRAM}: ${MESSAGE}\n”)
);
};

destination d_bunkerweb_security {
file(”/var/log/bunkerweb/security.log”
create_dirs(yes)
dir_perm(0755)
perm(0644)
template(”${ISODATE} ${HOST} ${PROGRAM}: ${MESSAGE}\n”)
);
};

destination d_scheduler {
file(”/var/log/bunkerweb/scheduler.log”
create_dirs(yes)
dir_perm(0755)
perm(0644)
template(”${ISODATE} ${HOST} ${PROGRAM}: ${MESSAGE}\n”)
);
};

destination d_autoconf {
file(”/var/log/bunkerweb/autoconf.log”
create_dirs(yes)
dir_perm(0755)
perm(0644)
template(”${ISODATE} ${HOST} ${PROGRAM}: ${MESSAGE}\n”)
);
};

destination d_ui {
file(”/var/log/bunkerweb/ui.log”
create_dirs(yes)
dir_perm(0755)
perm(0644)
template(”${ISODATE} ${HOST} ${PROGRAM}: ${MESSAGE}\n”)
);
};

destination d_redis {
file(”/var/log/bunkerweb/redis.log”
create_dirs(yes)
dir_perm(0755)
perm(0644)
template(”${ISODATE} ${HOST} ${PROGRAM}: ${MESSAGE}\n”)
);
};

# Combined log for all BunkerWeb services

destination d_bunkerweb_all {
file(”/var/log/bunkerweb/all.log”
create_dirs(yes)
dir_perm(0755)
perm(0644)
template(”${ISODATE} ${HOST} ${PROGRAM}: ${MESSAGE}\n”)
);
};

# System logs

destination d_system {
file(”/var/log/syslog-ng/system.log”
create_dirs(yes)
dir_perm(0755)
perm(0644)
template(”${ISODATE} ${HOST} ${PROGRAM}: ${MESSAGE}\n”)
);
};

# Console output for debugging

destination d_console {
file(”/dev/stdout”
template(”${ISODATE} ${HOST} ${PROGRAM}: ${MESSAGE}\n”)
);
};

# Log rotation destination (for logrotate integration)

destination d_bunkerweb_rotated {
file(”/var/log/bunkerweb/bunkerweb.log”
create_dirs(yes)
dir_perm(0755)
perm(0644)
template(”${ISODATE} ${HOST} ${PROGRAM}: ${MESSAGE}\n”)
);
};

# JSON formatted logs for log aggregation systems

destination d_json_logs {
file(”/var/log/bunkerweb/json/bunkerweb.json”
create_dirs(yes)
dir_perm(0755)
perm(0644)
template(”$(format-json –scope rfc3164 –scope nv-pairs –exclude DATE –key ISODATE)\n”)
);
};

# Log paths - connect sources, filters, and destinations

log {
source(s_network);
filter(f_bunkerweb);
filter(f_access_logs);
destination(d_bunkerweb_access);
destination(d_bunkerweb_all);
destination(d_json_logs);
flags(final);
};

log {
source(s_network);
filter(f_bunkerweb);
filter(f_error_logs);
destination(d_bunkerweb_error);
destination(d_bunkerweb_all);
destination(d_json_logs);
flags(final);
};

log {
source(s_network);
filter(f_bunkerweb);
filter(f_security_logs);
destination(d_bunkerweb_security);
destination(d_bunkerweb_all);
destination(d_json_logs);
flags(final);
};

log {
source(s_network);
filter(f_bw_scheduler);
destination(d_scheduler);
destination(d_bunkerweb_all);
destination(d_json_logs);
flags(final);
};

log {
source(s_network);
filter(f_bw_autoconf);
destination(d_autoconf);
destination(d_bunkerweb_all);
destination(d_json_logs);
flags(final);
};

log {
source(s_network);
filter(f_bw_ui);
destination(d_ui);
destination(d_bunkerweb_all);
destination(d_json_logs);
flags(final);
};

log {
source(s_network);
filter(f_bw_redis);
destination(d_redis);
destination(d_bunkerweb_all);
destination(d_json_logs);
flags(final);
};

# Catch-all for other BunkerWeb logs

log {
source(s_network);
destination(d_bunkerweb_rotated);
destination(d_json_logs);
};

# System logs

log {
source(s_src);
destination(d_system);
};

# Console output for debugging (uncomment for troubleshooting)

# log {

# source(s_network);

# destination(d_console);

# };

# Statistics and monitoring

@include “/etc/syslog-ng/conf.d/*.conf”
